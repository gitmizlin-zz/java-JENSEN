2015-12-10
Iterator (repetition)

Minns att vi har ORDNADE samlingar, t ex: array, arraylist
dvs varje element har ett index

Vi kan loopa igenom en sån samling t ex : 
for (int i = 0; i < list.size(); i++) {
	// array - fixed length. cannot use generics.
	list[i];
	// arraylist cannot store primitives, only objects. Flexible length
	lis.get(i);	
}

MEN! Det finns o-ordnade samligar.
Dessa utgår ifrån gränssnittet Set.
Dvs varje element har inte ett index.
En sån samling (och alla sorters samlingar) kan loopas igenom på tre sätt (från java8)

***Tre sätt att iterera över samlingar***
1. streams & aggregating functions 
2. for-each loop (enhanced loop) - for (Object o : myCollection)
	"i" saknas (vi vet inte vilken iteration i ordningen vi befinner oss i)
3. Med hjälp av iteratorer (Tänk något som pekar ut (tillhandahåller) objekten i en samling i en viss ordning = den står emellan objekten). Det är någon klass som implementerar Iterator (javas gränssnitt), dvs implementerar metoderna 

hasNext()
next()
(och remove() innan java8)	

Vi kan då iterera över allt som är "interarbart", vilket är alla klasser som implementerar gränssnittet Iterable, vilket i sin tur är allt som implementerar Collection, vilket är alla samlingar i java.
De implementerar metoden iterator() som returnerar en iterator*(ett objekt som har Iterator för datatyp)

 +++ The Iterable interface (java.lang.Iterable) is one of the root interfaces of the Java collection classes. +++

 Fördelar med iterator
 1. vi kan ta bort saker ur samlingen







2015-12-07

Collections

	Tillåta dubletter?
	Ordnad samling? Måste vara sorterad?

	Mappad / adresserad (samling av par)

	<<Interface>>
	Collection

**** Human is a superclass of Teacher and Student****

Human[] h = new Human[5];
Teacher t = new Teacher();
Student s = new Student();
h[0] = t;
h[1] = s;


Designmönster - Composite
När man vill hantera en grupp av objekt som ett objekt

Composite = sammansatt objekt
Component = abstrakt klass
En metod i Component överskuggas i Composite så att den räknar med sig själv och alla objekt den innehåller.

---
Designmönster - Iterator
3 sätt i Japa 8 att loopa över/iterera över en Collection
 * for-each-loop ex: for(Card c _ deckOfCards)
 * (Java 8) streams och aggregating functions	public String toString() 
 * Iterator
 



2015-11-26

Repetition
Klasser som har Abstract / Adapter i namnet är abstrakta klasser.
Abstrakta klasser instansieras aldrig.


----
Trådar

Exempel: "Programmet svarar ej. avsluta?"
* Chat (Servern har en tråd / klient)

Prioriteringar
	Problem kan uppstå om flera trådar för anspråk på samma resurser.
	Lösning: synkronisera trådar

updated process -> parallelism / parallelisering
Datorn delar upp processer på mindre processer




2015-11-23

Dokumentation

Varför?
	Överblick
	Samla ihop vd som är viktigt
	Instruktioner - Hur används det?
	Underlätta framtida utveckling
	(Information till nästa utvecklare)
	Påminna sig själv (och andra)

Hjälpmedel dokumentation
	Illustrationer(kan inkluderas med HTML-kod för bilder: <img src="..."/>)
	Diagram
	Exempel
	Dfinitioner
	Metaforer


För vem?
	För användaren
		manualer
		inbyggd dokumentation

	För utvecklaren
		API (kod som ska återanvändas och därför måste beskrivas, ex: Java 8 API Documentaiotn)
		(API-Application Programmable Interface)

Programming guide
	(Beskrivande hur kod kan/ska användas i sammanhanget)

javadoc: Genererar dokumentation i HTML baserad på kommentarer i källkoden.
	Kan dokumentera:
		klasser
		paket
		gränssnitt
		metoder
		konstruktorer
		instans- och klassvariabler		

Börja jagadoc kommentar med 
/**  
 * Graphical User Interface for Yatzy.
Ej obligatoriskt -> * Creates, sets up and handles UI for Yatzy
 *
*/

class Yatzy View {

/**
 * Change appearance of chosen dice in UI
Block tag -> * @param dicenr Dice to update, 1-5
 * @return Returns nothing
*/

	public void update Dice(int dicenr) {
	
	}
}	

Polymorfism
poly = flera
morf = skepad/form
flera skepnader/former

När ett objekt kan "ha flera former"
Centralt är överskuggning (override) och arv

Dice
 - value : int <- Fält (Instans- och klassvariabler)
 + getValue() <- metod
 + roll() <- metod

Åtkomstsynlighet
 - private
 + public
 # protected
 ~ package

------
JTable

class MyFrame extends JFrame {
	public void setupGui() {
	b.setBackground(...) *
	b.setFong(...)  **
	}
}				

* class MyButton extends JButton {
	public MyButton();
		setBackground(...);
		setFont(...);
	}	
}

score board: modell





2015-11-19

Mer om felhantering

try {
	// kod som kan gå fel
} catch(Exception e) {
	// vad göra när det går fel
}

--

main()
 |_startGame()
 	|_addPlayer()
 		|_checkPlayer()

FEL (Exceptions) kastas när fel uppstår

Vi kan skapa och hantera egna fel (Exceptions)


Exception <- MyException

--

Sortering av lista

med comparable (tänk "jag" jämförs och sorteras)
ex: 
Dice d1 = new Dice();
Dice d2 = new Dice();
ArrayList<Dice> list = new ArrayList<Dice>();
Collections.sort(list);
sort(list) gpr igenom alla objekt i listan och kollar hur de förhåller sig till varandra med hjälp av deras metod compareTo(object o)

Objekten har metoden eftersom klassen implements Comparable

Ex 
class Dice implements Comparable { ... }
	
dice1.compareTo(dice2)


med comparator (tänk något/någon extern/yttre part jämför och sorterar)

ex
Player p1 = new Player("Oscar", "Björkman");
Player p1 = new Player("Oscar", "C");
ArrayList<Player> plyaers = new ArrayList<>();
// add ....

players.sort(new SortByLastName());

	SortByLastName() är en Comparator, dvs en klass som implementerar Comparator 
	SortByLastName måste då ha med metoden public int compare(Object o1, Object o2)


---

2015-11-16
Model
View
Control

 - flexibilitet
 - utbytbarhet
 - data/model oberoende av vy

Ex. program i olika språk
view (vyer) fem svenska / five engelska
model       dice: 5

statistik 
data finns kvar om graf försvinner

t ex : Varje vy(tärning) motsvarar en modell.


---

Designmönster Observer/observable
problem: Hur kan vi ordna så att ett objekt speglar/följer/observerar ett annat objekt?

Observer: den som tittar (observatör) ex: facebook-news feed, twitter: följare, pernumeranter
Observable / subject : den som tittas på ex: vännerna(s uppdateringar), en person, tidning

subjekt har något som är observer






----


2015-11-09

OOP och design

Hur kan kod ser ut?

Design kriterier

inkapsling (encapsulation)
lös koppling (loose coupling)
sammanhällning (cohesion)
ansvarsdrivet
återanvändbarhet
	arv
	importera paket
	metoder
	ramverk (Math, Collections m.fl)

Designmönster
"Gang of Four" skrev boken Design Patterns 1995.
	- Samlade "sätt att programera på" som mönster
	- Återanvändbara lösningar på specifika problem
	- ett enhetligt språk att kommunicera programmering på
	- Delas in i tre kategorier
		Skapandemönster
		Strukturmönster
		Beteendemönster
	- Ej bundet till programmeringsspråk (förutom att OOP stöds)


MVC: model view control
Ett sätt att strukturera upp program (delar):
	MODEL
		data
		algoritmer
		logik
		ingen grafik!!

	VIEW
		grafiska representation av MODEL
		speglar / visar upp MODEL

	CONTROL
		interaktionen som uppdaterar MODEL (och då sin tur VIEW)

A -> B
riktad association. 
A känner till B. 
B oberoende av A

A - B
association ex Teacher-Student


Delas ofta upp i Model + (View Control)

M + V + C 




*** Abstrakt klass - adaptrar ***

När vi implementerar ett interface så måste vi implementera ALLA (absutrakta) metoder.

abstrakt metod ex: 
public String getName(); // ";" --> abstrakt
gränssnitt XXXListener i java har ibland flera metoder (t ex så har mauseListener 5 st metoder)
Om vi inte vill använda alla, hur gör vi så?

Scenario 1
MyMouseListener - - - > <<Interface>> MoseListener

Alla metoder i gränssnittet måste implementeras

Sxenario 2
MyMouseListener - - - > MouseAdapter - - -> <<Interface>> MoseListener

MouseAdapter är en abstrakt klass. Den implementerar alla metoder i MouseListener. Vi ärver från den och överskuggar (override) de metoder vi vill ha.

En abstrakt klass har måde abstrakta metoder och implementerade metoder, men det går ej att skapa objekt av den.




-------------------------

2015-11-05

Händelser (events)

Ex: knapptryck, fokus i textruta, fönstret förstoras om,
oväntade händelser (krasch)
muspekaren äver något, klicka på något
tangenttyrck
swipe


Interaktion i swing
1. Det finns händelser...
2. Vi behöver lyssna (efter händelser)
3. Vi behöver (en klass som ÄR) en lyssnare

 a) class MyActionListner implements ActionListener {
         // Skriv kod för action Performed()
     }

b) En inre klass
     Anonym
     Med lambda (java8)

c) klassen vi befinner oss i, ex: myWindow, myFrame etc 

4. Eftersom lyssnare är gränssnitt (interface) så måste vi ha med lyssnarens metoder
5. Vi skriver kod för vad som ska ske i respektive metod
6. för samman lyssnare - händelser med addXXXListener(Liste ner listener)


Lyssnare
gränssnitt/interface 

interface ActionListener { }
en metod:
void actionPerformance(ActionEvent e)

interface WindowListener { }
interface KeyListener { }
interface MouseListener