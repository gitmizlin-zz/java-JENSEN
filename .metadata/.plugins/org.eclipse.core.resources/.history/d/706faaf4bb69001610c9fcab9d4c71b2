package com.exempel.martin.client;

import java.util.ArrayList;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.dom.client.Style.Cursor;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.KeyCodes;
import com.google.gwt.event.dom.client.KeyDownEvent;
import com.google.gwt.event.dom.client.KeyDownHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.MultiWordSuggestOracle;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.SuggestBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

import jdk.management.resource.internal.inst.WindowsAsynchronousFileChannelImplRMHooks;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */

public class ExempelProjekt implements EntryPoint {
	private double operand1;
	private double operand2;
	private String operator;
	private double answer;
	
	private VerticalPanel mainPanel = new VerticalPanel(); 
	private HorizontalPanel addPanel = new HorizontalPanel();
	  
	private TextBox calcTextBox  = new TextBox();
	private TextBox operand2TextBox = new TextBox();
	private Button calculateButton = new Button("Calc");
	  
	private FlexTable numTable = new FlexTable();
	private String[] operators = new String[] {"/", "*", "-", "+", "="};
	private String[] clears = new String[] {"AC", "C"};
	private String[] buttomRow = new String[] {"0", "."};
		   
//	private MultiWordSuggestOracle oracle = new MultiWordSuggestOracle();
//	private SuggestBox operatorTextBox = new SuggestBox(oracle);

	private ArrayList<String> calcArrayList = new ArrayList<>();
	
  /**
   * Entry point method.
   */
	public void onModuleLoad() {
		
		// TODO Assemble Main panel.	  
		addPanel.add(calcTextBox);
		mainPanel.add(addPanel);
		mainPanel.add(numTable);
		
		// TODO Associate the Main panel with the HTML host page.
		RootPanel.get("calc").add(mainPanel);
		
		// TODO Move cursor focus to the input box.	
//		addPanel.getElement().getStyle().setCursor(Cursor.POINTER);
 
	    
	    // Create buttons
		Button button;
	    int row = 0;
	    int col = 0;
	    int indexClears = 0;
	    int indexOperators = 0;
	    int indexBottomRow = 0;
	    int k = 0;
		
    	for (int i = 0; i < 20; i++) {
    		
		    if (col != 3) {
		    	if (row == 0) {
		    		button = new Button(clears[indexClears]);
		    		addClickHandlerToButtons(button);
				    button.addClickHandler(new ClickHandler() {
				        public void onClick(ClickEvent event) {

				        }}); 	
		    		indexClears++;	    		
		    	
		    	} else if (row == 4) {
		    		button = new Button(buttomRow[indexBottomRow]);
		    		addClickHandlerToButtons(button);
		    		indexBottomRow++; 	    		
		    	
		    	} else {		    	
		    		String value = String.valueOf(9 - k);
		    		button = new Button(value); 
		    		addClickHandlerToButtons(button);
		    		k++;
		    	}
		    	
		    } else {
		    	button = new Button(operators[indexOperators]);	 
		    	addClickHandlerToButtons(button);
	    		indexOperators++;
	    	}
	    	
    		numTable.setWidget(row, col, button);
    		col++;
    		
			if ((i % 4) == 3 && i > 0) {
				// go to a new row, and go back to first column
				row++;
				col = 0;				
			}
	    }  
	}
	
	private void addClickHandlerToButtons(Button button) {
	    button.addClickHandler(new ClickHandler() {
	    	public void onClick(ClickEvent event) {
	    		if (button.getText() == "=") {
//	    			calcArrayList.add(button.getText());
	    			calculate();
//	    			getStringFromArray();
	    		}
	    		
	    		if (button.getText() == "AC") {
	    			calcArrayList.clear();
	    			calcTextBox.setText("");	    			 
	    			
	    		} else if (button.getText() == "C") {
	    			calcArrayList.remove(calcArrayList.get(calcArrayList.size() -1));
	    			getStringFromArray();	    			
	    		
	    		} else {
	  	          calcArrayList.add(button.getText());
		          getStringFromArray();	    			
	    		}
	    }}); 
	}
	
	public void getStringFromArray() {
		StringBuilder listString = new StringBuilder();
		for (String str : calcArrayList) {
		    listString.append(str);	
		    calcTextBox.setText(listString.toString());
		}        
	}
	
	
//	private void calculate() {		
//
//		//final String str = calcTextBox.getText().trim();			
//		
//		// Find the operator
//		int operatorIndex = 0;
//		for (String string : calcArrayList) {			
//			for (String operatorString : operators) {					
//				if (string == operatorString && string != "=") {
//					operator = string;
//					operatorIndex = calcArrayList.indexOf(operator);
//				}
//			}		
//		}
//		
//		// Get the first operand
//		int i = 0;
//		String listStringOp1 = "";
//		for (String s : calcArrayList) {
//			if (i < operatorIndex) {
//				listStringOp1 += s;
//			}
//			i++;			
//		}
//
//		operand1 = Double.parseDouble(listStringOp1);
//		
//		
//		// Get the second operand
//		int j = operatorIndex + 1;
//		String listStringOp2 = "";
//		for (String s : calcArrayList) {
//			s = calcArrayList.get(j);
//			listStringOp2 += s;
//			j++;
//			
//		}
//		
//		operand2 = Double.parseDouble(listStringOp2);
//		Window.alert(" op1: " + operand1 + " op2: " + operand2);
//		
//		 if (operator == "/" && operand2 == 0) {
//			 Window.alert("Zero is not a valid divisor.");
//			 return;
//		 }
//
//		 
//		 switch (operator) {
//		 	case "+" : 
//		 		answer = add(operand1, operand2);
//		 		break;
//		 	case "-" : 
//		 		answer = subtract(operand1, operand2);
//		 		break;			 	
//		 	case "*" : 
//		 		answer = multiply(operand1, operand2);
//			 	break;			 	
//			case "/" : 
//				answer = divide(operand1, operand2);
//				break;			 		 		
//		 }
//		 
//		 // Round up to 2 decimal places.	 
//		 answer = Math.round(answer * 100.0) / 100.0;		 
//		 calcArrayList.add(String.valueOf(answer));
//		 Window.alert("Answer: " + answer);
//	} 

	private void calculateOneDigit() {	 // one digit
		
		// Find the operator
		operator = calcArrayList.get(1);
		
		// Get the first operand
		operand1 = Double.parseDouble(calcArrayList.get(0));

		// Get the second operand
		operand2 = Double.parseDouble(calcArrayList.get(2));				
		
		 if (operator == "/" && operand2 == 0) {
			 Window.alert("Zero is not a valid divisor.");
			 return;
		 }
		 
		 switch (operator) {
		 	case "+" : 
		 		answer = add(operand1, operand2);
		 		break;
		 	case "-" : 
		 		answer = subtract(operand1, operand2);
		 		break;			 	
		 	case "*" : 
		 		answer = multiply(operand1, operand2);
			 	break;			 	
			case "/" : 
				answer = divide(operand1, operand2);
				break;			 		 		
		 }
		 
		 // Round up to 2 decimal places.	 
		 answer = Math.round(answer * 100.0) / 100.0;
		 
		 calcArrayList.add("=" + String.valueOf(answer));
	} 

	// Addition
	public double add(double operand1, double operand2) {
		 return operand1 + operand2;
	}
	
	// Subtraction
	public double subtract(double operand1, double operand2) {
		 return operand1 - operand2;
	}
	
	// Multiplication
	public double multiply(double operand1, double operand2) {
		 return operand1 * operand2;
	}
	
	// Division
	public double divide(double operand1, double operand2) {
		 return operand1 / operand2;
	}
			
	//Checks if a String could be seen as a double
	public boolean isDouble(String input) {
	   try {
	      Double.parseDouble(input);
	      return true;
	      
	   } catch(NumberFormatException e) {
	      return false;
	   }
	}
}
	